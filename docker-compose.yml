version: "3.9"
networks:
  brilhador:
    driver: bridge
services:
  postgres-brilhador:
    container_name: postgres-brilhador
    image: postgres
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "brilhador"
    ports:
      - "5432:5432"
    volumes:
      - .:/app
    working_dir: /app
    networks:
      - brilhador
  rabbitmq:
    container_name: rabbitmq-server
    image: rabbitmq:3.9-management
    environment:
      RABBITMQ_CONFIG_FILE: ./rabbitmq.conf
    ports:
      - "5673:5673"
      - "15672:15672"
    volumes:
      - .:/app
    working_dir: /app
    networks:
      - brilhador
  api-gateway:
    container_name: brilhador-api-gateway
    image: openjdk:17.0.2-slim-buster
    working_dir: /app
    ports:
      - "4000:80"
    expose:
      - "80"
    volumes:
      - ./api-gateway:/app
    command: ./mvnw spring-boot:run -X
    networks:
      - brilhador
  authentication-service-brilhador:
    container_name: authentication-service-brilhador
    image: openjdk:17.0.2-slim-buster
    volumes:
      - ./authentication:/app
    working_dir: /app
    expose:
      - 80
    command: ./mvnw spring-boot:run -X
    networks:
      - brilhador
    restart: unless-stopped
    depends_on:
      - postgres-brilhador
      - rabbitmq
      - api-gateway
  client-relationship-service-brilhador:
    container_name: client-relationship-service-brilhador
    image: openjdk:17.0.2-slim-buster
    volumes:
      - ./client-relationship:/app
    working_dir: /app
    expose:
      - 80
    command: ./mvnw spring-boot:run -X
    networks:
      - brilhador
    restart: unless-stopped
    depends_on:
      - postgres-brilhador
      - rabbitmq
      - api-gateway
  # mail-service-brilhador:
  #   container_name: mail-services-brilhador
  #   image: openjdk:17.0.2-slim-buster
  #   volumes:
  #     - ./mail:/app
  #   working_dir: /app
  #   expose:
  #     - 80
  #   command: ./mvnw spring-boot:run -X
  #   networks:
  #     - brilhador
  #   restart: unless-stopped
  #   depends_on:
  #     - postgres-brilhador
  #     - rabbitmq
  #     - api-gateway
  # strategic-systems-service-brilhador:
  #   container_name: strategic-systems-services-brilhador
  #   image: openjdk:17.0.2-slim-buster
  #   volumes:
  #     - ./strategic-systems-project:/app
  #   working_dir: /app
  #   expose:
  #     - 80
  #   command: ./mvnw spring-boot:run -X
  #   networks:
  #     - brilhador
  #   restart: unless-stopped
  #   depends_on:
  #     - postgres-brilhador
  #     - rabbitmq
  #     - api-gateway
  # financial-lancamentos-contabeis-brilhador:
  #   container_name: financial-lancamentos-contabeis-brilhador
  #   image: openjdk:11.0.15-slim-buster
  #   volumes:
  #     - './financial/lancamentos_contabeis:/app'
  #   working_dir: /app
  #   expose:
  #     - 80
  #   command: sh mvnw spring-boot:run -X
  #   networks:
  #     - brilhador
  # financial-operacaocontabil-brilhador:
  #   container_name: financial-operacaocontabil-brilhador
  #   image: openjdk:18.0.1.1-slim-buster
  #   volumes:
  #     - './financial/operacaocontabil:/app'
  #   working_dir: /app
  #   ports:
  #     - '8080:80'
  #   expose:
  #     - 80
  #   command: sh mvnw spring-boot:run -X
  #   networks:
  #     - brilhador
  #   restart: unless-stopped
  #   depends_on:
  #     - postgres-brilhador
  #     - rabbitmq
  #     - api-gateway
  # financial-patrimonial-brilhador:
  #   container_name: financial-patrimonial-brilhador
  #   image: openjdk:18.0.1.1-slim-buster
  #   volumes:
  #     - './financial/patrimonial:/app'
  #   working_dir: /app
  #   expose:
  #     - 80
  #   command: sh mvnw spring-boot:run -X
  #   networks:
  #     - brilhador
  #   restart: unless-stopped
  #   depends_on:
  #     - postgres-brilhador
  #     - rabbitmq
  #     - api-gateway
  # financial-plano-contas-brilhador:
  #   container_name: financial-plano-contas-brilhador
  #   image: openjdk:11.0.15-slim-buster
  #   volumes:
  #     - './financial/plano-contas:/app'
  #   working_dir: /app
  #   expose:
  #     - 80
  #   command: sh mvnw spring-boot:run -X
  #   networks:
  #     - brilhador
  #   restart: unless-stopped
  #   depends_on:
  #     - postgres-brilhador
  #     - rabbitmq
  #     - api-gateway
  # supply-chain-brilhador:
  #   container_name: supply-chain-brilhador
  #   image: openjdk:11.0.15-slim-buster
  #   volumes:
  #     - './supply-chain:/app'
  #   working_dir: /app
  #   expose:
  #     - 80
  #   command: sh mvnw spring-boot:run -X
  #   networks:
  #     - brilhador
  #   restart: unless-stopped
  #   depends_on:
  #     - postgres-brilhador
  #     - rabbitmq
  #     - api-gateway
  # human-resources-brilhador:
  #   container_name: human-resources-brilhador
  #   image: openjdk:17.0.2-slim-buster
  #   volumes:
  #     - './human-resources:/app'
  #   working_dir: /app
  #   expose:
  #     - 80
  #   command: sh mvnw spring-boot:run -X
  #   networks:
  #     - brilhador
  #   restart: unless-stopped
  #   depends_on:
  #     - postgres-brilhador
  #     - rabbitmq
  #     - api-gateway
  # inventory-brilhador:
  #   container_name: inventory-brilhador
  #   image: openjdk:11.0.15-slim-buster
  #   volumes:
  #     - './inventory:/app'
  #   working_dir: /app
  #   expose:
  #     - 80
  #   command: sh mvnw spring-boot:run -X
  #   networks:
  #     - brilhador
  #   restart: unless-stopped
  #   depends_on:
  #     - postgres-brilhador
  #     - rabbitmq
  #     - api-gateway
  mail-service-deconto:
    container_name: mail-service-deconto
    image: node:17.5.0-alpine
    volumes:
      - ./mail-deconto-nest:/app
    working_dir: /app
    command: npm run start:dev
    networks:
      - brilhador
  python-service-deconto: 
    container_name: python-service-deconto
    build: 
      context: ./python
      dockerfile: Dockerfile
    ports:
      - '8080:80'
    working_dir: /app
    command: python main.py
    networks:
      - brilhador
    volumes:
      - ./python:/app
    depends_on:
      - rabbitmq-server 
      - kafka-deconto
  zookeeper:
    container_name: zookeeper-deconto
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    networks:
      - brilhador
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    container_name: kafka-deconto
    image: docker.io/bitnami/kafka:3.2
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-deconto:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - brilhador
    depends_on:
      - zookeeper
volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local